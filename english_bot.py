#!/usr/bin/env python3

import re
import os
import time
import random
import socket
import platform
import subprocess
from typing import Optional, Tuple, List, Dict, Any
import telebot
import psycopg2
from telebot import types
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

from config import DB_CONFIG, BOT_TOKEN, QUIZ_SETTINGS, INTERFACE


class EnglishBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞."""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    IDLE = 'idle'
    ADDING_WORD_RUSSIAN = 'adding_word_russian'
    ADDING_WORD_ENGLISH = 'adding_word_english'
    DELETING_WORD = 'deleting_word'
    QUIZ = 'quiz'
    VIEWING_WORDS = 'viewing_words'
    
    def __init__(self, token: str, db_config: Dict[str, Any]) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.token = token
        self.db_config = db_config
        self.bot = telebot.TeleBot(token)
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.temp_data = {}    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.quiz_data = {}    # –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        self.words_pagination = {}  # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        self.conn = None
        self.cursor = None
        self.connect_to_database()
        self._register_handlers()
    
    def connect_to_database(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.conn = psycopg2.connect(
                dbname=self.db_config['dbname'],
                user=self.db_config['user'],
                password=self.db_config['password'],
                host=self.db_config['host'],
                port=self.db_config['port']
            )
            self.conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            self.cursor = self.conn.cursor()
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            self.create_tables()
            self.fill_common_words()
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_tables(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ª–æ–≤
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS words (
                    id SERIAL PRIMARY KEY,
                    russian_word VARCHAR(255) NOT NULL,
                    english_word VARCHAR(255) NOT NULL,
                    is_common BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_words (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    word_id INTEGER REFERENCES words(id) ON DELETE CASCADE,
                    correct_count INTEGER DEFAULT 0,
                    attempt_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, word_id)
                )
            ''')
            
            print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def fill_common_words(self) -> bool:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—â–∏–º –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤."""
        common_words = [
            ("–∫—Ä–∞—Å–Ω—ã–π", "red"),
            ("—Å–∏–Ω–∏–π", "blue"),
            ("–∑–µ–ª–µ–Ω—ã–π", "green"),
            ("–∂–µ–ª—Ç—ã–π", "yellow"),
            ("—á–µ—Ä–Ω—ã–π", "black"),
            ("–±–µ–ª—ã–π", "white"),
            ("—è", "I"),
            ("—Ç—ã", "you"),
            ("–æ–Ω", "he"),
            ("–æ–Ω–∞", "she")
        ]
        
        try:
            self.cursor.execute("SELECT COUNT(*) FROM words WHERE is_common = TRUE")
            count = self.cursor.fetchone()[0]
            
            if count == 0:
                for russian, english in common_words:
                    self.cursor.execute(
                        "INSERT INTO words (russian_word, english_word, is_common) "
                        "VALUES (%s, %s, TRUE)",
                        (russian, english)
                    )
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(common_words)} –æ–±—â–∏—Ö —Å–ª–æ–≤")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—â–∏—Ö —Å–ª–æ–≤: {e}")
            return False
    
       def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: types.Message) -> None:
            self._handle_start(message)
        
        @self.bot.message_handler(commands=['help'])
        def handle_help(message: types.Message) -> None:
            self._handle_help(message)
        
        @self.bot.message_handler(func=lambda message: message.text == '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ')
        def handle_quiz(message: types.Message) -> None:
            self._handle_quiz(message)
        
        @self.bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï')
        def handle_add_word(message: types.Message) -> None:
            self._handle_add_word(message)
        
        @self.bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ')
        def handle_delete_word(message: types.Message) -> None:
            self._handle_delete_word(message)
        
        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üìã')
        def handle_words_list(message: types.Message) -> None:
            self._handle_words_list(message)
        
        @self.bot.message_handler(func=lambda message: message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå')
        def handle_cancel(message: types.Message) -> None:
            self._handle_cancel(message)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_messages(message: types.Message) -> None:
            self._handle_messages(message)

    def _handle_start(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        db_user_id = self.register_user(user_id, username)
        
        if db_user_id:
            self.user_states[user_id] = self.IDLE
            markup = self._create_main_keyboard()
            
            self.bot.send_message(
                user_id,
                f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n"
                "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ üéÆ\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ‚ûï\n"
                "‚Ä¢ –£–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –≤—ã—É—á–∏–ª ‚ûñ\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å–ª–æ–≤ üìã\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
                reply_markup=markup
            )

    def _handle_help(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        self.bot.send_message(
            message.from_user.id,
            "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üìö\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
            "‚Ä¢ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞* üéÆ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤\n"
            "‚Ä¢ *–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ* ‚ûï - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ *–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ* ‚ûñ - –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ *–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤* üìã - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–ª–æ–≤\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é üëá",
            parse_mode='Markdown'
        )

    def _handle_quiz(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞'."""
        user_id = message.from_user.id
        db_user_id = self.get_user_id(user_id)
        
        if not db_user_id:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        word = self.get_random_word(db_user_id)
        
        if not word:
            self.bot.send_message(
                user_id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'."
            )
            return
        
        word_id, russian_word, english_word = word
        self.quiz_data[user_id] = word_id
        
        options, correct_answer = self.get_options(word_id, db_user_id)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [types.KeyboardButton(option) for option in options]
        markup.add(*buttons)
        
        self.user_states[user_id] = self.QUIZ
        
        self.bot.send_message(
            user_id,
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: *{russian_word}*",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def _handle_add_word(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'."""
        user_id = message.from_user.id
        self.user_states[user_id] = self.ADDING_WORD_RUSSIAN
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        cancel_btn = types.KeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå')
        markup.add(cancel_btn)
        
        self.bot.send_message(
            user_id,
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
            reply_markup=markup
        )

    def _handle_delete_word(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'."""
        user_id = message.from_user.id
        db_user_id = self.get_user_id(user_id)
        
        if not db_user_id:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        words = self.get_user_words(db_user_id)
        
        if not words:
            self.bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        for word_id, russian, english in words:
            btn = types.KeyboardButton(f"{russian} - {english} (ID: {word_id})")
            markup.add(btn)
        
        cancel_btn = types.KeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå')
        markup.add(cancel_btn)
        
        self.user_states[user_id] = self.DELETING_WORD
        
        self.bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )

    def _handle_words_list(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤'."""
        user_id = message.from_user.id
        db_user_id = self.get_user_id(user_id)
        
        if not db_user_id:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        words = self.get_user_words(db_user_id)
        
        if not words:
            self.bot.send_message(
                user_id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'."
            )
            return
        
        message_text = "üìã *–í–∞—à —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤:*\n\n"
        for i, (word_id, russian, english) in enumerate(words, 1):
            message_text += f"{i}. {russian} - {english}\n"
        
        markup = self._create_main_keyboard()
        
        self.bot.send_message(
            user_id,
            message_text,
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def _handle_cancel(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'."""
        user_id = message.from_user.id
        self.user_states[user_id] = self.IDLE
        
        if user_id in self.temp_data:
            del self.temp_data[user_id]
        
        markup = self._create_main_keyboard()
        
        self.bot.send_message(
            user_id,
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    def _handle_messages(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = message.from_user.id
        db_user_id = self.get_user_id(user_id)
        
        if not db_user_id:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        state = self.user_states.get(user_id, self.IDLE)
        
        if state == self.ADDING_WORD_RUSSIAN:
            russian_word = message.text.strip().lower()
            
            if user_id not in self.temp_data:
                self.temp_data[user_id] = {}
            self.temp_data[user_id]['russian'] = russian_word
            
            self.user_states[user_id] = self.ADDING_WORD_ENGLISH
            
            self.bot.send_message(
                user_id,
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{russian_word}' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:"
            )
        
        elif state == self.ADDING_WORD_ENGLISH:
            english_word = message.text.strip().lower()
            russian_word = self.temp_data[user_id]['russian']
            
            success, word_count = self.add_word(db_user_id, russian_word, english_word)
            
            markup = self._create_main_keyboard()
            
            if success:
                self.bot.send_message(
                    user_id,
                    f"‚úÖ –°–ª–æ–≤–æ '{russian_word} - {english_word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                    f"–í—Å–µ–≥–æ —É –≤–∞—Å {word_count} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
                    reply_markup=markup
                )
            else:
                self.bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=markup
                )
            
            self.user_states[user_id] = self.IDLE
            del self.temp_data[user_id]
        
        elif state == self.DELETING_WORD:
            text = message.text
            match = re.search(r'ID: (\d+)', text)
            
            if match:
                word_id = int(match.group(1))
                success = self.delete_word(db_user_id, word_id)
                
                markup = self._create_main_keyboard()
                
                if success:
                    self.bot.send_message(
                        user_id,
                        "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                        reply_markup=markup
                    )
                else:
                    self.bot.send_message(
                        user_id,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=markup
                    )
                
                self.user_states[user_id] = self.IDLE
        
        elif state == self.QUIZ:
            user_answer = message.text.strip().lower()
            word_id = self.quiz_data.get(user_id)
            
            if not word_id:
                self.bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.")
                return
            
            self.cursor.execute(
                "SELECT english_word FROM words WHERE id = %s",
                (word_id,)
            )
            correct_answer = self.cursor.fetchone()[0].lower()
            
            markup = self._create_main_keyboard()
            is_correct = user_answer.lower() == correct_answer.lower()
            
            self.update_word_stats(db_user_id, word_id, is_correct)
            
            if is_correct:
                self.bot.send_message(
                    user_id,
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! '{user_answer}' - –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                    reply_markup=markup
                )
            else:
                self.bot.send_message(
                    user_id,
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'.\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                    reply_markup=markup
                )
            
            self.user_states[user_id] = self.IDLE
            del self.quiz_data[user_id]
        
        else:
            self.bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
            )

    def _create_main_keyboard(self) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        quiz_btn = types.KeyboardButton('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéÆ')
        add_word_btn = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï')
        delete_word_btn = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ')
        words_list_btn = types.KeyboardButton('–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üìã')
        
        markup.add(quiz_btn, add_word_btn, delete_word_btn, words_list_btn)
        return markup

    def register_user(self, telegram_id: int, username: str) -> Optional[int]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            self.cursor.execute(
                "SELECT id FROM users WHERE telegram_id = %s", 
                (telegram_id,)
            )
            user = self.cursor.fetchone()
            
            if not user:
                self.cursor.execute(
                    "INSERT INTO users (telegram_id, username) VALUES (%s, %s) RETURNING id",
                    (telegram_id, username)
                )
                user_id = self.cursor.fetchone()[0]
                
                self.cursor.execute(
                    """
                    INSERT INTO user_words (user_id, word_id)
                    SELECT %s, id FROM words WHERE is_common = TRUE
                    """,
                    (user_id,)
                )
                
                print(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {telegram_id})")
                return user_id
            return user[0] if user else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def get_user_id(self, telegram_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID."""
        try:
            self.cursor.execute(
                "SELECT id FROM users WHERE telegram_id = %s", 
                (telegram_id,)
            )
            user = self.cursor.fetchone()
            return user[0] if user else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def add_word(self, user_id: int, russian_word: str, english_word: str) -> Tuple[bool, int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            self.cursor.execute(
                "SELECT id FROM words WHERE russian_word = %s AND english_word = %s",
                (russian_word, english_word)
            )
            word = self.cursor.fetchone()
            
            if not word:
                self.cursor.execute(
                    "INSERT INTO words (russian_word, english_word, is_common) "
                    "VALUES (%s, %s, FALSE) RETURNING id",
                    (russian_word, english_word)
                )
                word_id = self.cursor.fetchone()[0]
            else:
                word_id = word[0]
            
            self.cursor.execute(
                """
                INSERT INTO user_words (user_id, word_id)
                VALUES (%s, %s)
                ON CONFLICT (user_id, word_id) DO NOTHING
                """,
                (user_id, word_id)
            )
            
            self.cursor.execute(
                "SELECT COUNT(*) FROM user_words WHERE user_id = %s",
                (user_id,)
            )
            word_count = self.cursor.fetchone()[0]
            
            return True, word_count
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            return False, 0

    def delete_word(self, user_id: int, word_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            self.cursor.execute(
                "DELETE FROM user_words WHERE user_id = %s AND word_id = %s",
                (user_id, word_id)
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            return False

    def get_user_words(self, user_id: int) -> List[Tuple[int, str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            self.cursor.execute(
                """
                SELECT w.id, w.russian_word, w.english_word
                FROM words w
                JOIN user_words uw ON w.id = uw.word_id
                WHERE uw.user_id = %s
                """,
                (user_id,)
            )
            return self.cursor.fetchall()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []

    def get_random_word(self, user_id: int) -> Optional[Tuple[int, str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π."""
        try:
            self.cursor.execute(
                """
                SELECT w.id, w.russian_word, w.english_word
                FROM words w
                JOIN user_words uw ON w.id = uw.word_id
                WHERE uw.user_id = %s
                ORDER BY RANDOM()
                LIMIT 1
                """,
                (user_id,)
            )
            return self.cursor.fetchone()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return None

    def get_options(self, correct_word_id: int, user_id: int) -> Tuple[List[str], str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
        try:
            self.cursor.execute(
                "SELECT english_word FROM words WHERE id = %s",
                (correct_word_id,)
            )
            correct_answer = self.cursor.fetchone()[0]
            
            self.cursor.execute(
                """
                SELECT w.english_word
                FROM words w
                JOIN user_words uw ON w.id = uw.word_id
                WHERE uw.user_id = %s AND w.id != %s
                ORDER BY RANDOM()
                LIMIT 3
                """,
                (user_id, correct_word_id)
            )
            
            other_answers = [row[0] for row in self.cursor.fetchall()]
            
            if len(other_answers) < 3:
                self.cursor.execute(
                    """
                    SELECT english_word
                    FROM words
                    WHERE id != %s AND english_word != %s
                    ORDER BY RANDOM()
                    LIMIT %s
                    """,
                    (correct_word_id, correct_answer, 3 - len(other_answers))
                )
                other_answers.extend([row[0] for row in self.cursor.fetchall()])
            
            all_options = [correct_answer] + other_answers
            random.shuffle(all_options)
            
            return all_options, correct_answer
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞: {e}")
            return [], ""

    def update_word_stats(self, user_id: int, word_id: int, is_correct: bool) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤–∞."""
        try:
            self.cursor.execute(
                """
                UPDATE user_words
                SET attempt_count = attempt_count + 1,
                    correct_count = correct_count + %s
                WHERE user_id = %s AND word_id = %s
                """,
                (1 if is_correct else 0, user_id, word_id)
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤–∞: {e}")
            return False

    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            self.bot.infinity_polling()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            self.close()


def check_host_availability(host: str, port: int = 5432, timeout: int = 5) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞."""
    try:
        socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket_obj.settimeout(timeout)
        result = socket_obj.connect_ex((host, port))
        socket_obj.close()
        return result == 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞: {e}")
        return False


def setup_database(db_config: Dict[str, Any]) -> bool:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ."""
    if not check_host_availability(db_config['host'], int(db_config['port'])):
        print(f"–•–æ—Å—Ç {db_config['host']}:{db_config['port']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        conn = psycopg2.connect(
            user=db_config['user'],
            password=db_config['password'],
            host=db_config['host'],
            port=db_config['port']
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        cursor.execute(
            f"SELECT 1 FROM pg_catalog.pg_database WHERE datname = '{db_config['dbname']}'"
        )
        exists = cursor.fetchone()
        
        if not exists:
            cursor.execute(f"CREATE DATABASE {db_config['dbname']}")
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_config['dbname']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def install_postgresql() -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    os_name = platform.system().lower()
    print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os_name}")
    
    if os_name == 'windows':
        print("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL –Ω–∞ Windows:")
        print("1. –°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å https://www.postgresql.org/download/windows/")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        return False
    
    try:
        if os_name == 'linux':
            if os.path.exists('/etc/debian_version'):
                subprocess.run(['sudo', 'apt', 'update'], check=True)
                subprocess.run(
                    ['sudo', 'apt', 'install', '-y', 'postgresql', 'postgresql-contrib'],
                    check=True
                )
            elif os.path.exists('/etc/redhat-release'):
                subprocess.run(
                    ['sudo', 'dnf', 'install', '-y', 'postgresql-server', 'postgresql-contrib'],
                    check=True
                )
                subprocess.run(['sudo', 'postgresql-setup', 'initdb'], check=True)
            
            subprocess.run(['sudo', 'systemctl', 'start', 'postgresql'], check=True)
            subprocess.run(['sudo', 'systemctl', 'enable', 'postgresql'], check=True)
            return True
        
        elif os_name == 'darwin':
            try:
                subprocess.run(['brew', '--version'], check=True, stdout=subprocess.PIPE)
            except (subprocess.CalledProcessError, FileNotFoundError):
                install_cmd = (
                    '/bin/bash -c "$(curl -fsSL '
                    'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
                )
                subprocess.run(install_cmd, shell=True, check=True)
            
            subprocess.run(['brew', 'install', 'postgresql'], check=True)
            subprocess.run(['brew', 'services', 'start', 'postgresql'], check=True)
            return True
        
        print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {os_name}")
        return False
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL: {e}")
        return False


if __name__ == '__main__':
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    if not setup_database(DB_CONFIG):
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        if input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL? (y/n): ").lower() == 'y':
            if install_postgresql():
                time.sleep(5)
                setup_database(DB_CONFIG)
    
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot = EnglishBot(BOT_TOKEN, DB_CONFIG)
    bot.start()
